/* tslint:disable */
/* eslint-disable */
/**
 * Authentication API
 * Husqvarna Group Authentication API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PostOAuth2Response } from '../models';
/**
 * OAuth2Api - axios parameter creator
 * @export
 */
export const OAuth2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Revoke an access token and the associated refresh tokens. 
         * @summary OAuth2 logout
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2RevokePost: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('oauth2RevokePost', 'token', token)
            const localVarPath = `/oauth2/revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication AuthorizationHeader required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (token !== undefined) { 
                localVarFormParams.set('token', token as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an access_token. 
         * @summary OAuth2 login
         * @param {Oauth2TokenPostGrantTypeEnum} grantType The grant type to use
         * @param {string} clientId used for all oauth2 flows
         * @param {string} [clientSecret] used with the client_credentials and authorization_code flow
         * @param {string} [code] used in the authorization_code flow
         * @param {string} [scope] used by all flows to specify the needed scopes.
         * @param {string} [redirectUri] used in the authorization_code flow
         * @param {string} [refreshToken] used with the refresh_token grant to get a new access_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2TokenPost: async (grantType: Oauth2TokenPostGrantTypeEnum, clientId: string, clientSecret?: string, code?: string, scope?: string, redirectUri?: string, refreshToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('oauth2TokenPost', 'grantType', grantType)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('oauth2TokenPost', 'clientId', clientId)
            const localVarPath = `/oauth2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
            if (code !== undefined) { 
                localVarFormParams.set('code', code as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (redirectUri !== undefined) { 
                localVarFormParams.set('redirect_uri', redirectUri as any);
            }
    
            if (refreshToken !== undefined) { 
                localVarFormParams.set('refresh_token', refreshToken as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OAuth2Api - functional programming interface
 * @export
 */
export const OAuth2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OAuth2ApiAxiosParamCreator(configuration)
    return {
        /**
         * Revoke an access token and the associated refresh tokens. 
         * @summary OAuth2 logout
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauth2RevokePost(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauth2RevokePost(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OAuth2Api.oauth2RevokePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create an access_token. 
         * @summary OAuth2 login
         * @param {Oauth2TokenPostGrantTypeEnum} grantType The grant type to use
         * @param {string} clientId used for all oauth2 flows
         * @param {string} [clientSecret] used with the client_credentials and authorization_code flow
         * @param {string} [code] used in the authorization_code flow
         * @param {string} [scope] used by all flows to specify the needed scopes.
         * @param {string} [redirectUri] used in the authorization_code flow
         * @param {string} [refreshToken] used with the refresh_token grant to get a new access_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauth2TokenPost(grantType: Oauth2TokenPostGrantTypeEnum, clientId: string, clientSecret?: string, code?: string, scope?: string, redirectUri?: string, refreshToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostOAuth2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauth2TokenPost(grantType, clientId, clientSecret, code, scope, redirectUri, refreshToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OAuth2Api.oauth2TokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OAuth2Api - factory interface
 * @export
 */
export const OAuth2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OAuth2ApiFp(configuration)
    return {
        /**
         * Revoke an access token and the associated refresh tokens. 
         * @summary OAuth2 logout
         * @param {OAuth2ApiOauth2RevokePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2RevokePost(requestParameters: OAuth2ApiOauth2RevokePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.oauth2RevokePost(requestParameters.token, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an access_token. 
         * @summary OAuth2 login
         * @param {OAuth2ApiOauth2TokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2TokenPost(requestParameters: OAuth2ApiOauth2TokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostOAuth2Response> {
            return localVarFp.oauth2TokenPost(requestParameters.grantType, requestParameters.clientId, requestParameters.clientSecret, requestParameters.code, requestParameters.scope, requestParameters.redirectUri, requestParameters.refreshToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OAuth2Api - interface
 * @export
 * @interface OAuth2Api
 */
export interface OAuth2ApiInterface {
    /**
     * Revoke an access token and the associated refresh tokens. 
     * @summary OAuth2 logout
     * @param {OAuth2ApiOauth2RevokePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2ApiInterface
     */
    oauth2RevokePost(requestParameters: OAuth2ApiOauth2RevokePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Create an access_token. 
     * @summary OAuth2 login
     * @param {OAuth2ApiOauth2TokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2ApiInterface
     */
    oauth2TokenPost(requestParameters: OAuth2ApiOauth2TokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostOAuth2Response>;

}

/**
 * Request parameters for oauth2RevokePost operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiOauth2RevokePostRequest
 */
export interface OAuth2ApiOauth2RevokePostRequest {
    /**
     * 
     * @type {string}
     * @memberof OAuth2ApiOauth2RevokePost
     */
    readonly token: string
}

/**
 * Request parameters for oauth2TokenPost operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiOauth2TokenPostRequest
 */
export interface OAuth2ApiOauth2TokenPostRequest {
    /**
     * The grant type to use
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenPost
     */
    readonly grantType: Oauth2TokenPostGrantTypeEnum

    /**
     * used for all oauth2 flows
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenPost
     */
    readonly clientId: string

    /**
     * used with the client_credentials and authorization_code flow
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenPost
     */
    readonly clientSecret?: string

    /**
     * used in the authorization_code flow
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenPost
     */
    readonly code?: string

    /**
     * used by all flows to specify the needed scopes.
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenPost
     */
    readonly scope?: string

    /**
     * used in the authorization_code flow
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenPost
     */
    readonly redirectUri?: string

    /**
     * used with the refresh_token grant to get a new access_token
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenPost
     */
    readonly refreshToken?: string
}

/**
 * OAuth2Api - object-oriented interface
 * @export
 * @class OAuth2Api
 * @extends {BaseAPI}
 */
export class OAuth2Api extends BaseAPI implements OAuth2ApiInterface {
    /**
     * Revoke an access token and the associated refresh tokens. 
     * @summary OAuth2 logout
     * @param {OAuth2ApiOauth2RevokePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public oauth2RevokePost(requestParameters: OAuth2ApiOauth2RevokePostRequest, options?: RawAxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).oauth2RevokePost(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an access_token. 
     * @summary OAuth2 login
     * @param {OAuth2ApiOauth2TokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public oauth2TokenPost(requestParameters: OAuth2ApiOauth2TokenPostRequest, options?: RawAxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).oauth2TokenPost(requestParameters.grantType, requestParameters.clientId, requestParameters.clientSecret, requestParameters.code, requestParameters.scope, requestParameters.redirectUri, requestParameters.refreshToken, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum Oauth2TokenPostGrantTypeEnum {
    AUTHORIZATION_CODE = 'authorization_code',
    CLIENT_CREDENTIALS = 'client_credentials',
    REFRESH_TOKEN = 'refresh_token'
}
