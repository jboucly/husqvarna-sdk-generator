/* tslint:disable */
/* eslint-disable */
/**
 * Automower® Connect API
 * This API allows you to control and obtain information about Automower®.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { JsonApiDataDocumentCommandResult } from '../models';
// @ts-ignore
import type { JsonApiDataDocumentListCommandResult } from '../models';
// @ts-ignore
import type { JsonApiErrorDocument } from '../models';
// @ts-ignore
import type { MowersIdActionsPostRequest } from '../models';
// @ts-ignore
import type { MowersIdCalendarPostRequest } from '../models';
// @ts-ignore
import type { MowersIdSettingsPostRequest } from '../models';
// @ts-ignore
import type { MowersIdStayOutZonesStayOutIdPatchRequest } from '../models';
// @ts-ignore
import type { MowersIdWorkAreasWorkAreaIdCalendarPostRequest } from '../models';
// @ts-ignore
import type { MowersIdWorkAreasWorkAreaIdPatchRequest } from '../models';
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export const ActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accepts actions to control a mower linked to a user.
         * @summary Accepts actions to control a mower linked to a user.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {MowersIdActionsPostRequest} mowersIdActionsPostRequest A single action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdActionsPost: async (id: string, mowersIdActionsPostRequest: MowersIdActionsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdActionsPost', 'id', id)
            // verify required parameter 'mowersIdActionsPostRequest' is not null or undefined
            assertParamExists('mowersIdActionsPost', 'mowersIdActionsPostRequest', mowersIdActionsPostRequest)
            const localVarPath = `/mowers/{id}/actions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mowersIdActionsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the calendar on the mower. The data sent in will replace the calendar on the mower. You need to include all tasks both new and old. To delete a task you just skip the task in the list.
         * @summary Update the calendar on the mower.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {MowersIdCalendarPostRequest} mowersIdCalendarPostRequest A calendar with all tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdCalendarPost: async (id: string, mowersIdCalendarPostRequest: MowersIdCalendarPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdCalendarPost', 'id', id)
            // verify required parameter 'mowersIdCalendarPostRequest' is not null or undefined
            assertParamExists('mowersIdCalendarPost', 'mowersIdCalendarPostRequest', mowersIdCalendarPostRequest)
            const localVarPath = `/mowers/{id}/calendar`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mowersIdCalendarPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirm current non fatal error on the mower. Same function that is available in the Automower Connect app. Will only work if current error is considered confirmable by the mower. Available for models 405X, 415X, 435X AWD and 535 AWD. Also available on all Ceora, EPOS and NERA models.
         * @summary Confirm current error.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdErrorsConfirmPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdErrorsConfirmPost', 'id', id)
            const localVarPath = `/mowers/{id}/errors/confirm`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the settings on the mower. Available settings can be found when getting the mower data. Its possible to set cutting height or/and headlight.
         * @summary Update the settings on the mower.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {MowersIdSettingsPostRequest} mowersIdSettingsPostRequest Settings to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdSettingsPost: async (id: string, mowersIdSettingsPostRequest: MowersIdSettingsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdSettingsPost', 'id', id)
            // verify required parameter 'mowersIdSettingsPostRequest' is not null or undefined
            assertParamExists('mowersIdSettingsPost', 'mowersIdSettingsPostRequest', mowersIdSettingsPostRequest)
            const localVarPath = `/mowers/{id}/settings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mowersIdSettingsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset the cutting blade usage time. Same function that is available in the Automower Connect app. The statistics value cuttingBladeUsageTime will be reset. Can be used when cutting blades are changed on the Automower to know when its time to the blades next time.
         * @summary Reset the cutting blade usage time.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdStatisticsResetCuttingBladeUsageTimePost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdStatisticsResetCuttingBladeUsageTimePost', 'id', id)
            const localVarPath = `/mowers/{id}/statistics/resetCuttingBladeUsageTime`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable or disable the stay-out zone.
         * @summary Enable or disable the stay-out zone.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {string} stayOutId Identity of the stay-out zone.
         * @param {MowersIdStayOutZonesStayOutIdPatchRequest} mowersIdStayOutZonesStayOutIdPatchRequest Body for stay-out zone to enable or disable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdStayOutZonesStayOutIdPatch: async (id: string, stayOutId: string, mowersIdStayOutZonesStayOutIdPatchRequest: MowersIdStayOutZonesStayOutIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdStayOutZonesStayOutIdPatch', 'id', id)
            // verify required parameter 'stayOutId' is not null or undefined
            assertParamExists('mowersIdStayOutZonesStayOutIdPatch', 'stayOutId', stayOutId)
            // verify required parameter 'mowersIdStayOutZonesStayOutIdPatchRequest' is not null or undefined
            assertParamExists('mowersIdStayOutZonesStayOutIdPatch', 'mowersIdStayOutZonesStayOutIdPatchRequest', mowersIdStayOutZonesStayOutIdPatchRequest)
            const localVarPath = `/mowers/{id}/stayOutZones/{stayOutId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"stayOutId"}}`, encodeURIComponent(String(stayOutId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mowersIdStayOutZonesStayOutIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the calendar for a work area on the mower. This will replace all tasks for the work area.
         * @summary Update the calendar for a work area on the mower.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {number} workAreaId Identity of the work area.
         * @param {MowersIdWorkAreasWorkAreaIdCalendarPostRequest} mowersIdWorkAreasWorkAreaIdCalendarPostRequest A calendar with all tasks for a work area
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdWorkAreasWorkAreaIdCalendarPost: async (id: string, workAreaId: number, mowersIdWorkAreasWorkAreaIdCalendarPostRequest: MowersIdWorkAreasWorkAreaIdCalendarPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdWorkAreasWorkAreaIdCalendarPost', 'id', id)
            // verify required parameter 'workAreaId' is not null or undefined
            assertParamExists('mowersIdWorkAreasWorkAreaIdCalendarPost', 'workAreaId', workAreaId)
            // verify required parameter 'mowersIdWorkAreasWorkAreaIdCalendarPostRequest' is not null or undefined
            assertParamExists('mowersIdWorkAreasWorkAreaIdCalendarPost', 'mowersIdWorkAreasWorkAreaIdCalendarPostRequest', mowersIdWorkAreasWorkAreaIdCalendarPostRequest)
            const localVarPath = `/mowers/{id}/workAreas/{workAreaId}/calendar`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workAreaId"}}`, encodeURIComponent(String(workAreaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mowersIdWorkAreasWorkAreaIdCalendarPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the work area on the mower. This will update cutting height on the work area.
         * @summary Update the the work area on the mower.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {number} workAreaId Identity of the work area.
         * @param {MowersIdWorkAreasWorkAreaIdPatchRequest} mowersIdWorkAreasWorkAreaIdPatchRequest Body for work area to update cutting height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdWorkAreasWorkAreaIdPatch: async (id: string, workAreaId: number, mowersIdWorkAreasWorkAreaIdPatchRequest: MowersIdWorkAreasWorkAreaIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdWorkAreasWorkAreaIdPatch', 'id', id)
            // verify required parameter 'workAreaId' is not null or undefined
            assertParamExists('mowersIdWorkAreasWorkAreaIdPatch', 'workAreaId', workAreaId)
            // verify required parameter 'mowersIdWorkAreasWorkAreaIdPatchRequest' is not null or undefined
            assertParamExists('mowersIdWorkAreasWorkAreaIdPatch', 'mowersIdWorkAreasWorkAreaIdPatchRequest', mowersIdWorkAreasWorkAreaIdPatchRequest)
            const localVarPath = `/mowers/{id}/workAreas/{workAreaId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workAreaId"}}`, encodeURIComponent(String(workAreaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mowersIdWorkAreasWorkAreaIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActionsApi - functional programming interface
 * @export
 */
export const ActionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Accepts actions to control a mower linked to a user.
         * @summary Accepts actions to control a mower linked to a user.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {MowersIdActionsPostRequest} mowersIdActionsPostRequest A single action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdActionsPost(id: string, mowersIdActionsPostRequest: MowersIdActionsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocumentCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdActionsPost(id, mowersIdActionsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActionsApi.mowersIdActionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the calendar on the mower. The data sent in will replace the calendar on the mower. You need to include all tasks both new and old. To delete a task you just skip the task in the list.
         * @summary Update the calendar on the mower.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {MowersIdCalendarPostRequest} mowersIdCalendarPostRequest A calendar with all tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdCalendarPost(id: string, mowersIdCalendarPostRequest: MowersIdCalendarPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocumentCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdCalendarPost(id, mowersIdCalendarPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActionsApi.mowersIdCalendarPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirm current non fatal error on the mower. Same function that is available in the Automower Connect app. Will only work if current error is considered confirmable by the mower. Available for models 405X, 415X, 435X AWD and 535 AWD. Also available on all Ceora, EPOS and NERA models.
         * @summary Confirm current error.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdErrorsConfirmPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocumentCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdErrorsConfirmPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActionsApi.mowersIdErrorsConfirmPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the settings on the mower. Available settings can be found when getting the mower data. Its possible to set cutting height or/and headlight.
         * @summary Update the settings on the mower.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {MowersIdSettingsPostRequest} mowersIdSettingsPostRequest Settings to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdSettingsPost(id: string, mowersIdSettingsPostRequest: MowersIdSettingsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocumentListCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdSettingsPost(id, mowersIdSettingsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActionsApi.mowersIdSettingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reset the cutting blade usage time. Same function that is available in the Automower Connect app. The statistics value cuttingBladeUsageTime will be reset. Can be used when cutting blades are changed on the Automower to know when its time to the blades next time.
         * @summary Reset the cutting blade usage time.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdStatisticsResetCuttingBladeUsageTimePost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocumentCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdStatisticsResetCuttingBladeUsageTimePost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActionsApi.mowersIdStatisticsResetCuttingBladeUsageTimePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable or disable the stay-out zone.
         * @summary Enable or disable the stay-out zone.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {string} stayOutId Identity of the stay-out zone.
         * @param {MowersIdStayOutZonesStayOutIdPatchRequest} mowersIdStayOutZonesStayOutIdPatchRequest Body for stay-out zone to enable or disable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdStayOutZonesStayOutIdPatch(id: string, stayOutId: string, mowersIdStayOutZonesStayOutIdPatchRequest: MowersIdStayOutZonesStayOutIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocumentCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdStayOutZonesStayOutIdPatch(id, stayOutId, mowersIdStayOutZonesStayOutIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActionsApi.mowersIdStayOutZonesStayOutIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the calendar for a work area on the mower. This will replace all tasks for the work area.
         * @summary Update the calendar for a work area on the mower.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {number} workAreaId Identity of the work area.
         * @param {MowersIdWorkAreasWorkAreaIdCalendarPostRequest} mowersIdWorkAreasWorkAreaIdCalendarPostRequest A calendar with all tasks for a work area
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdWorkAreasWorkAreaIdCalendarPost(id: string, workAreaId: number, mowersIdWorkAreasWorkAreaIdCalendarPostRequest: MowersIdWorkAreasWorkAreaIdCalendarPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocumentCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdWorkAreasWorkAreaIdCalendarPost(id, workAreaId, mowersIdWorkAreasWorkAreaIdCalendarPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActionsApi.mowersIdWorkAreasWorkAreaIdCalendarPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the work area on the mower. This will update cutting height on the work area.
         * @summary Update the the work area on the mower.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {number} workAreaId Identity of the work area.
         * @param {MowersIdWorkAreasWorkAreaIdPatchRequest} mowersIdWorkAreasWorkAreaIdPatchRequest Body for work area to update cutting height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdWorkAreasWorkAreaIdPatch(id: string, workAreaId: number, mowersIdWorkAreasWorkAreaIdPatchRequest: MowersIdWorkAreasWorkAreaIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocumentCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdWorkAreasWorkAreaIdPatch(id, workAreaId, mowersIdWorkAreasWorkAreaIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ActionsApi.mowersIdWorkAreasWorkAreaIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ActionsApi - factory interface
 * @export
 */
export const ActionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActionsApiFp(configuration)
    return {
        /**
         * Accepts actions to control a mower linked to a user.
         * @summary Accepts actions to control a mower linked to a user.
         * @param {ActionsApiMowersIdActionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdActionsPost(requestParameters: ActionsApiMowersIdActionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult> {
            return localVarFp.mowersIdActionsPost(requestParameters.id, requestParameters.mowersIdActionsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the calendar on the mower. The data sent in will replace the calendar on the mower. You need to include all tasks both new and old. To delete a task you just skip the task in the list.
         * @summary Update the calendar on the mower.
         * @param {ActionsApiMowersIdCalendarPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdCalendarPost(requestParameters: ActionsApiMowersIdCalendarPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult> {
            return localVarFp.mowersIdCalendarPost(requestParameters.id, requestParameters.mowersIdCalendarPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirm current non fatal error on the mower. Same function that is available in the Automower Connect app. Will only work if current error is considered confirmable by the mower. Available for models 405X, 415X, 435X AWD and 535 AWD. Also available on all Ceora, EPOS and NERA models.
         * @summary Confirm current error.
         * @param {ActionsApiMowersIdErrorsConfirmPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdErrorsConfirmPost(requestParameters: ActionsApiMowersIdErrorsConfirmPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult> {
            return localVarFp.mowersIdErrorsConfirmPost(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the settings on the mower. Available settings can be found when getting the mower data. Its possible to set cutting height or/and headlight.
         * @summary Update the settings on the mower.
         * @param {ActionsApiMowersIdSettingsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdSettingsPost(requestParameters: ActionsApiMowersIdSettingsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentListCommandResult> {
            return localVarFp.mowersIdSettingsPost(requestParameters.id, requestParameters.mowersIdSettingsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset the cutting blade usage time. Same function that is available in the Automower Connect app. The statistics value cuttingBladeUsageTime will be reset. Can be used when cutting blades are changed on the Automower to know when its time to the blades next time.
         * @summary Reset the cutting blade usage time.
         * @param {ActionsApiMowersIdStatisticsResetCuttingBladeUsageTimePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdStatisticsResetCuttingBladeUsageTimePost(requestParameters: ActionsApiMowersIdStatisticsResetCuttingBladeUsageTimePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult> {
            return localVarFp.mowersIdStatisticsResetCuttingBladeUsageTimePost(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable or disable the stay-out zone.
         * @summary Enable or disable the stay-out zone.
         * @param {ActionsApiMowersIdStayOutZonesStayOutIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdStayOutZonesStayOutIdPatch(requestParameters: ActionsApiMowersIdStayOutZonesStayOutIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult> {
            return localVarFp.mowersIdStayOutZonesStayOutIdPatch(requestParameters.id, requestParameters.stayOutId, requestParameters.mowersIdStayOutZonesStayOutIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the calendar for a work area on the mower. This will replace all tasks for the work area.
         * @summary Update the calendar for a work area on the mower.
         * @param {ActionsApiMowersIdWorkAreasWorkAreaIdCalendarPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdWorkAreasWorkAreaIdCalendarPost(requestParameters: ActionsApiMowersIdWorkAreasWorkAreaIdCalendarPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult> {
            return localVarFp.mowersIdWorkAreasWorkAreaIdCalendarPost(requestParameters.id, requestParameters.workAreaId, requestParameters.mowersIdWorkAreasWorkAreaIdCalendarPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the work area on the mower. This will update cutting height on the work area.
         * @summary Update the the work area on the mower.
         * @param {ActionsApiMowersIdWorkAreasWorkAreaIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdWorkAreasWorkAreaIdPatch(requestParameters: ActionsApiMowersIdWorkAreasWorkAreaIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult> {
            return localVarFp.mowersIdWorkAreasWorkAreaIdPatch(requestParameters.id, requestParameters.workAreaId, requestParameters.mowersIdWorkAreasWorkAreaIdPatchRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export interface ActionsApiInterface {
    /**
     * Accepts actions to control a mower linked to a user.
     * @summary Accepts actions to control a mower linked to a user.
     * @param {ActionsApiMowersIdActionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    mowersIdActionsPost(requestParameters: ActionsApiMowersIdActionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult>;

    /**
     * Update the calendar on the mower. The data sent in will replace the calendar on the mower. You need to include all tasks both new and old. To delete a task you just skip the task in the list.
     * @summary Update the calendar on the mower.
     * @param {ActionsApiMowersIdCalendarPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    mowersIdCalendarPost(requestParameters: ActionsApiMowersIdCalendarPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult>;

    /**
     * Confirm current non fatal error on the mower. Same function that is available in the Automower Connect app. Will only work if current error is considered confirmable by the mower. Available for models 405X, 415X, 435X AWD and 535 AWD. Also available on all Ceora, EPOS and NERA models.
     * @summary Confirm current error.
     * @param {ActionsApiMowersIdErrorsConfirmPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    mowersIdErrorsConfirmPost(requestParameters: ActionsApiMowersIdErrorsConfirmPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult>;

    /**
     * Update the settings on the mower. Available settings can be found when getting the mower data. Its possible to set cutting height or/and headlight.
     * @summary Update the settings on the mower.
     * @param {ActionsApiMowersIdSettingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    mowersIdSettingsPost(requestParameters: ActionsApiMowersIdSettingsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentListCommandResult>;

    /**
     * Reset the cutting blade usage time. Same function that is available in the Automower Connect app. The statistics value cuttingBladeUsageTime will be reset. Can be used when cutting blades are changed on the Automower to know when its time to the blades next time.
     * @summary Reset the cutting blade usage time.
     * @param {ActionsApiMowersIdStatisticsResetCuttingBladeUsageTimePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    mowersIdStatisticsResetCuttingBladeUsageTimePost(requestParameters: ActionsApiMowersIdStatisticsResetCuttingBladeUsageTimePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult>;

    /**
     * Enable or disable the stay-out zone.
     * @summary Enable or disable the stay-out zone.
     * @param {ActionsApiMowersIdStayOutZonesStayOutIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    mowersIdStayOutZonesStayOutIdPatch(requestParameters: ActionsApiMowersIdStayOutZonesStayOutIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult>;

    /**
     * Update the calendar for a work area on the mower. This will replace all tasks for the work area.
     * @summary Update the calendar for a work area on the mower.
     * @param {ActionsApiMowersIdWorkAreasWorkAreaIdCalendarPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    mowersIdWorkAreasWorkAreaIdCalendarPost(requestParameters: ActionsApiMowersIdWorkAreasWorkAreaIdCalendarPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult>;

    /**
     * Update the work area on the mower. This will update cutting height on the work area.
     * @summary Update the the work area on the mower.
     * @param {ActionsApiMowersIdWorkAreasWorkAreaIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    mowersIdWorkAreasWorkAreaIdPatch(requestParameters: ActionsApiMowersIdWorkAreasWorkAreaIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentCommandResult>;

}

/**
 * Request parameters for mowersIdActionsPost operation in ActionsApi.
 * @export
 * @interface ActionsApiMowersIdActionsPostRequest
 */
export interface ActionsApiMowersIdActionsPostRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof ActionsApiMowersIdActionsPost
     */
    readonly id: string

    /**
     * A single action
     * @type {MowersIdActionsPostRequest}
     * @memberof ActionsApiMowersIdActionsPost
     */
    readonly mowersIdActionsPostRequest: MowersIdActionsPostRequest
}

/**
 * Request parameters for mowersIdCalendarPost operation in ActionsApi.
 * @export
 * @interface ActionsApiMowersIdCalendarPostRequest
 */
export interface ActionsApiMowersIdCalendarPostRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof ActionsApiMowersIdCalendarPost
     */
    readonly id: string

    /**
     * A calendar with all tasks
     * @type {MowersIdCalendarPostRequest}
     * @memberof ActionsApiMowersIdCalendarPost
     */
    readonly mowersIdCalendarPostRequest: MowersIdCalendarPostRequest
}

/**
 * Request parameters for mowersIdErrorsConfirmPost operation in ActionsApi.
 * @export
 * @interface ActionsApiMowersIdErrorsConfirmPostRequest
 */
export interface ActionsApiMowersIdErrorsConfirmPostRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof ActionsApiMowersIdErrorsConfirmPost
     */
    readonly id: string
}

/**
 * Request parameters for mowersIdSettingsPost operation in ActionsApi.
 * @export
 * @interface ActionsApiMowersIdSettingsPostRequest
 */
export interface ActionsApiMowersIdSettingsPostRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof ActionsApiMowersIdSettingsPost
     */
    readonly id: string

    /**
     * Settings to update
     * @type {MowersIdSettingsPostRequest}
     * @memberof ActionsApiMowersIdSettingsPost
     */
    readonly mowersIdSettingsPostRequest: MowersIdSettingsPostRequest
}

/**
 * Request parameters for mowersIdStatisticsResetCuttingBladeUsageTimePost operation in ActionsApi.
 * @export
 * @interface ActionsApiMowersIdStatisticsResetCuttingBladeUsageTimePostRequest
 */
export interface ActionsApiMowersIdStatisticsResetCuttingBladeUsageTimePostRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof ActionsApiMowersIdStatisticsResetCuttingBladeUsageTimePost
     */
    readonly id: string
}

/**
 * Request parameters for mowersIdStayOutZonesStayOutIdPatch operation in ActionsApi.
 * @export
 * @interface ActionsApiMowersIdStayOutZonesStayOutIdPatchRequest
 */
export interface ActionsApiMowersIdStayOutZonesStayOutIdPatchRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof ActionsApiMowersIdStayOutZonesStayOutIdPatch
     */
    readonly id: string

    /**
     * Identity of the stay-out zone.
     * @type {string}
     * @memberof ActionsApiMowersIdStayOutZonesStayOutIdPatch
     */
    readonly stayOutId: string

    /**
     * Body for stay-out zone to enable or disable
     * @type {MowersIdStayOutZonesStayOutIdPatchRequest}
     * @memberof ActionsApiMowersIdStayOutZonesStayOutIdPatch
     */
    readonly mowersIdStayOutZonesStayOutIdPatchRequest: MowersIdStayOutZonesStayOutIdPatchRequest
}

/**
 * Request parameters for mowersIdWorkAreasWorkAreaIdCalendarPost operation in ActionsApi.
 * @export
 * @interface ActionsApiMowersIdWorkAreasWorkAreaIdCalendarPostRequest
 */
export interface ActionsApiMowersIdWorkAreasWorkAreaIdCalendarPostRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof ActionsApiMowersIdWorkAreasWorkAreaIdCalendarPost
     */
    readonly id: string

    /**
     * Identity of the work area.
     * @type {number}
     * @memberof ActionsApiMowersIdWorkAreasWorkAreaIdCalendarPost
     */
    readonly workAreaId: number

    /**
     * A calendar with all tasks for a work area
     * @type {MowersIdWorkAreasWorkAreaIdCalendarPostRequest}
     * @memberof ActionsApiMowersIdWorkAreasWorkAreaIdCalendarPost
     */
    readonly mowersIdWorkAreasWorkAreaIdCalendarPostRequest: MowersIdWorkAreasWorkAreaIdCalendarPostRequest
}

/**
 * Request parameters for mowersIdWorkAreasWorkAreaIdPatch operation in ActionsApi.
 * @export
 * @interface ActionsApiMowersIdWorkAreasWorkAreaIdPatchRequest
 */
export interface ActionsApiMowersIdWorkAreasWorkAreaIdPatchRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof ActionsApiMowersIdWorkAreasWorkAreaIdPatch
     */
    readonly id: string

    /**
     * Identity of the work area.
     * @type {number}
     * @memberof ActionsApiMowersIdWorkAreasWorkAreaIdPatch
     */
    readonly workAreaId: number

    /**
     * Body for work area to update cutting height
     * @type {MowersIdWorkAreasWorkAreaIdPatchRequest}
     * @memberof ActionsApiMowersIdWorkAreasWorkAreaIdPatch
     */
    readonly mowersIdWorkAreasWorkAreaIdPatchRequest: MowersIdWorkAreasWorkAreaIdPatchRequest
}

/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export class ActionsApi extends BaseAPI implements ActionsApiInterface {
    /**
     * Accepts actions to control a mower linked to a user.
     * @summary Accepts actions to control a mower linked to a user.
     * @param {ActionsApiMowersIdActionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public mowersIdActionsPost(requestParameters: ActionsApiMowersIdActionsPostRequest, options?: RawAxiosRequestConfig) {
        return ActionsApiFp(this.configuration).mowersIdActionsPost(requestParameters.id, requestParameters.mowersIdActionsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the calendar on the mower. The data sent in will replace the calendar on the mower. You need to include all tasks both new and old. To delete a task you just skip the task in the list.
     * @summary Update the calendar on the mower.
     * @param {ActionsApiMowersIdCalendarPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public mowersIdCalendarPost(requestParameters: ActionsApiMowersIdCalendarPostRequest, options?: RawAxiosRequestConfig) {
        return ActionsApiFp(this.configuration).mowersIdCalendarPost(requestParameters.id, requestParameters.mowersIdCalendarPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirm current non fatal error on the mower. Same function that is available in the Automower Connect app. Will only work if current error is considered confirmable by the mower. Available for models 405X, 415X, 435X AWD and 535 AWD. Also available on all Ceora, EPOS and NERA models.
     * @summary Confirm current error.
     * @param {ActionsApiMowersIdErrorsConfirmPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public mowersIdErrorsConfirmPost(requestParameters: ActionsApiMowersIdErrorsConfirmPostRequest, options?: RawAxiosRequestConfig) {
        return ActionsApiFp(this.configuration).mowersIdErrorsConfirmPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the settings on the mower. Available settings can be found when getting the mower data. Its possible to set cutting height or/and headlight.
     * @summary Update the settings on the mower.
     * @param {ActionsApiMowersIdSettingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public mowersIdSettingsPost(requestParameters: ActionsApiMowersIdSettingsPostRequest, options?: RawAxiosRequestConfig) {
        return ActionsApiFp(this.configuration).mowersIdSettingsPost(requestParameters.id, requestParameters.mowersIdSettingsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset the cutting blade usage time. Same function that is available in the Automower Connect app. The statistics value cuttingBladeUsageTime will be reset. Can be used when cutting blades are changed on the Automower to know when its time to the blades next time.
     * @summary Reset the cutting blade usage time.
     * @param {ActionsApiMowersIdStatisticsResetCuttingBladeUsageTimePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public mowersIdStatisticsResetCuttingBladeUsageTimePost(requestParameters: ActionsApiMowersIdStatisticsResetCuttingBladeUsageTimePostRequest, options?: RawAxiosRequestConfig) {
        return ActionsApiFp(this.configuration).mowersIdStatisticsResetCuttingBladeUsageTimePost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable or disable the stay-out zone.
     * @summary Enable or disable the stay-out zone.
     * @param {ActionsApiMowersIdStayOutZonesStayOutIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public mowersIdStayOutZonesStayOutIdPatch(requestParameters: ActionsApiMowersIdStayOutZonesStayOutIdPatchRequest, options?: RawAxiosRequestConfig) {
        return ActionsApiFp(this.configuration).mowersIdStayOutZonesStayOutIdPatch(requestParameters.id, requestParameters.stayOutId, requestParameters.mowersIdStayOutZonesStayOutIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the calendar for a work area on the mower. This will replace all tasks for the work area.
     * @summary Update the calendar for a work area on the mower.
     * @param {ActionsApiMowersIdWorkAreasWorkAreaIdCalendarPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public mowersIdWorkAreasWorkAreaIdCalendarPost(requestParameters: ActionsApiMowersIdWorkAreasWorkAreaIdCalendarPostRequest, options?: RawAxiosRequestConfig) {
        return ActionsApiFp(this.configuration).mowersIdWorkAreasWorkAreaIdCalendarPost(requestParameters.id, requestParameters.workAreaId, requestParameters.mowersIdWorkAreasWorkAreaIdCalendarPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the work area on the mower. This will update cutting height on the work area.
     * @summary Update the the work area on the mower.
     * @param {ActionsApiMowersIdWorkAreasWorkAreaIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    public mowersIdWorkAreasWorkAreaIdPatch(requestParameters: ActionsApiMowersIdWorkAreasWorkAreaIdPatchRequest, options?: RawAxiosRequestConfig) {
        return ActionsApiFp(this.configuration).mowersIdWorkAreasWorkAreaIdPatch(requestParameters.id, requestParameters.workAreaId, requestParameters.mowersIdWorkAreasWorkAreaIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

