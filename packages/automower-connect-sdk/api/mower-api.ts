/* tslint:disable */
/* eslint-disable */
/**
 * Automower® Connect API
 * This API allows you to control and obtain information about Automower®.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { JsonApiDataDocument } from '../models';
// @ts-ignore
import type { JsonApiDataDocumentMessages } from '../models';
// @ts-ignore
import type { JsonApiDataDocumentStayOutZones } from '../models';
// @ts-ignore
import type { JsonApiDataDocumentWorkArea } from '../models';
// @ts-ignore
import type { JsonApiDataListDocument } from '../models';
// @ts-ignore
import type { JsonApiDataListDocumentWorkAreas } from '../models';
// @ts-ignore
import type { JsonApiErrorDocument } from '../models';
/**
 * MowerApi - axios parameter creator
 * @export
 */
export const MowerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List data for all mowers linked to the user associated with the access token.
         * @summary List data for all mowers linked to a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mowers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get data for a mower linked to the user associated with the access token.
         * @summary Get data for a mower linked to a user.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdGet', 'id', id)
            const localVarPath = `/mowers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get last occurred messages for a mower (max 50). Includes the position when the error occurred.
         * @summary Get last messages for a mower.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdMessagesGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdMessagesGet', 'id', id)
            const localVarPath = `/mowers/{id}/messages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all stay out zones for a mower linked to the user associated with the access token. Stay out zones are not available on EPOS mowers.
         * @summary Get all stay out zones for a mower linked to a user.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdStayOutZonesGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdStayOutZonesGet', 'id', id)
            const localVarPath = `/mowers/{id}/stayOutZones`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all detailed work areas for a mower linked to the user associated with the access token.
         * @summary Get all detailed work areas for a mower linked to a user.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdWorkAreasGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdWorkAreasGet', 'id', id)
            const localVarPath = `/mowers/{id}/workAreas`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed data for a work area for a mower linked to the user associated with the access token.
         * @summary Get detailed data for a work area for a mower linked to a user.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {number} workAreaId Identity of the work area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdWorkAreasWorkAreaIdGet: async (id: string, workAreaId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mowersIdWorkAreasWorkAreaIdGet', 'id', id)
            // verify required parameter 'workAreaId' is not null or undefined
            assertParamExists('mowersIdWorkAreasWorkAreaIdGet', 'workAreaId', workAreaId)
            const localVarPath = `/mowers/{id}/workAreas/{workAreaId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workAreaId"}}`, encodeURIComponent(String(workAreaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            // authentication Token required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication Provider required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization-Provider", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MowerApi - functional programming interface
 * @export
 */
export const MowerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MowerApiAxiosParamCreator(configuration)
    return {
        /**
         * List data for all mowers linked to the user associated with the access token.
         * @summary List data for all mowers linked to a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataListDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MowerApi.mowersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get data for a mower linked to the user associated with the access token.
         * @summary Get data for a mower linked to a user.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MowerApi.mowersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get last occurred messages for a mower (max 50). Includes the position when the error occurred.
         * @summary Get last messages for a mower.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdMessagesGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocumentMessages>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdMessagesGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MowerApi.mowersIdMessagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all stay out zones for a mower linked to the user associated with the access token. Stay out zones are not available on EPOS mowers.
         * @summary Get all stay out zones for a mower linked to a user.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdStayOutZonesGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocumentStayOutZones>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdStayOutZonesGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MowerApi.mowersIdStayOutZonesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all detailed work areas for a mower linked to the user associated with the access token.
         * @summary Get all detailed work areas for a mower linked to a user.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdWorkAreasGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataListDocumentWorkAreas>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdWorkAreasGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MowerApi.mowersIdWorkAreasGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get detailed data for a work area for a mower linked to the user associated with the access token.
         * @summary Get detailed data for a work area for a mower linked to a user.
         * @param {string} id Identity of the mower. Can be obtain when listing mowers.
         * @param {number} workAreaId Identity of the work area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mowersIdWorkAreasWorkAreaIdGet(id: string, workAreaId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataDocumentWorkArea>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mowersIdWorkAreasWorkAreaIdGet(id, workAreaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MowerApi.mowersIdWorkAreasWorkAreaIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MowerApi - factory interface
 * @export
 */
export const MowerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MowerApiFp(configuration)
    return {
        /**
         * List data for all mowers linked to the user associated with the access token.
         * @summary List data for all mowers linked to a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersGet(options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataListDocument> {
            return localVarFp.mowersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get data for a mower linked to the user associated with the access token.
         * @summary Get data for a mower linked to a user.
         * @param {MowerApiMowersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdGet(requestParameters: MowerApiMowersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocument> {
            return localVarFp.mowersIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get last occurred messages for a mower (max 50). Includes the position when the error occurred.
         * @summary Get last messages for a mower.
         * @param {MowerApiMowersIdMessagesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdMessagesGet(requestParameters: MowerApiMowersIdMessagesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentMessages> {
            return localVarFp.mowersIdMessagesGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all stay out zones for a mower linked to the user associated with the access token. Stay out zones are not available on EPOS mowers.
         * @summary Get all stay out zones for a mower linked to a user.
         * @param {MowerApiMowersIdStayOutZonesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdStayOutZonesGet(requestParameters: MowerApiMowersIdStayOutZonesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentStayOutZones> {
            return localVarFp.mowersIdStayOutZonesGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all detailed work areas for a mower linked to the user associated with the access token.
         * @summary Get all detailed work areas for a mower linked to a user.
         * @param {MowerApiMowersIdWorkAreasGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdWorkAreasGet(requestParameters: MowerApiMowersIdWorkAreasGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataListDocumentWorkAreas> {
            return localVarFp.mowersIdWorkAreasGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed data for a work area for a mower linked to the user associated with the access token.
         * @summary Get detailed data for a work area for a mower linked to a user.
         * @param {MowerApiMowersIdWorkAreasWorkAreaIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mowersIdWorkAreasWorkAreaIdGet(requestParameters: MowerApiMowersIdWorkAreasWorkAreaIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentWorkArea> {
            return localVarFp.mowersIdWorkAreasWorkAreaIdGet(requestParameters.id, requestParameters.workAreaId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MowerApi - interface
 * @export
 * @interface MowerApi
 */
export interface MowerApiInterface {
    /**
     * List data for all mowers linked to the user associated with the access token.
     * @summary List data for all mowers linked to a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApiInterface
     */
    mowersGet(options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataListDocument>;

    /**
     * Get data for a mower linked to the user associated with the access token.
     * @summary Get data for a mower linked to a user.
     * @param {MowerApiMowersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApiInterface
     */
    mowersIdGet(requestParameters: MowerApiMowersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocument>;

    /**
     * Get last occurred messages for a mower (max 50). Includes the position when the error occurred.
     * @summary Get last messages for a mower.
     * @param {MowerApiMowersIdMessagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApiInterface
     */
    mowersIdMessagesGet(requestParameters: MowerApiMowersIdMessagesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentMessages>;

    /**
     * Get all stay out zones for a mower linked to the user associated with the access token. Stay out zones are not available on EPOS mowers.
     * @summary Get all stay out zones for a mower linked to a user.
     * @param {MowerApiMowersIdStayOutZonesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApiInterface
     */
    mowersIdStayOutZonesGet(requestParameters: MowerApiMowersIdStayOutZonesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentStayOutZones>;

    /**
     * Get all detailed work areas for a mower linked to the user associated with the access token.
     * @summary Get all detailed work areas for a mower linked to a user.
     * @param {MowerApiMowersIdWorkAreasGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApiInterface
     */
    mowersIdWorkAreasGet(requestParameters: MowerApiMowersIdWorkAreasGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataListDocumentWorkAreas>;

    /**
     * Get detailed data for a work area for a mower linked to the user associated with the access token.
     * @summary Get detailed data for a work area for a mower linked to a user.
     * @param {MowerApiMowersIdWorkAreasWorkAreaIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApiInterface
     */
    mowersIdWorkAreasWorkAreaIdGet(requestParameters: MowerApiMowersIdWorkAreasWorkAreaIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JsonApiDataDocumentWorkArea>;

}

/**
 * Request parameters for mowersIdGet operation in MowerApi.
 * @export
 * @interface MowerApiMowersIdGetRequest
 */
export interface MowerApiMowersIdGetRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof MowerApiMowersIdGet
     */
    readonly id: string
}

/**
 * Request parameters for mowersIdMessagesGet operation in MowerApi.
 * @export
 * @interface MowerApiMowersIdMessagesGetRequest
 */
export interface MowerApiMowersIdMessagesGetRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof MowerApiMowersIdMessagesGet
     */
    readonly id: string
}

/**
 * Request parameters for mowersIdStayOutZonesGet operation in MowerApi.
 * @export
 * @interface MowerApiMowersIdStayOutZonesGetRequest
 */
export interface MowerApiMowersIdStayOutZonesGetRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof MowerApiMowersIdStayOutZonesGet
     */
    readonly id: string
}

/**
 * Request parameters for mowersIdWorkAreasGet operation in MowerApi.
 * @export
 * @interface MowerApiMowersIdWorkAreasGetRequest
 */
export interface MowerApiMowersIdWorkAreasGetRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof MowerApiMowersIdWorkAreasGet
     */
    readonly id: string
}

/**
 * Request parameters for mowersIdWorkAreasWorkAreaIdGet operation in MowerApi.
 * @export
 * @interface MowerApiMowersIdWorkAreasWorkAreaIdGetRequest
 */
export interface MowerApiMowersIdWorkAreasWorkAreaIdGetRequest {
    /**
     * Identity of the mower. Can be obtain when listing mowers.
     * @type {string}
     * @memberof MowerApiMowersIdWorkAreasWorkAreaIdGet
     */
    readonly id: string

    /**
     * Identity of the work area.
     * @type {number}
     * @memberof MowerApiMowersIdWorkAreasWorkAreaIdGet
     */
    readonly workAreaId: number
}

/**
 * MowerApi - object-oriented interface
 * @export
 * @class MowerApi
 * @extends {BaseAPI}
 */
export class MowerApi extends BaseAPI implements MowerApiInterface {
    /**
     * List data for all mowers linked to the user associated with the access token.
     * @summary List data for all mowers linked to a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApi
     */
    public mowersGet(options?: RawAxiosRequestConfig) {
        return MowerApiFp(this.configuration).mowersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get data for a mower linked to the user associated with the access token.
     * @summary Get data for a mower linked to a user.
     * @param {MowerApiMowersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApi
     */
    public mowersIdGet(requestParameters: MowerApiMowersIdGetRequest, options?: RawAxiosRequestConfig) {
        return MowerApiFp(this.configuration).mowersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get last occurred messages for a mower (max 50). Includes the position when the error occurred.
     * @summary Get last messages for a mower.
     * @param {MowerApiMowersIdMessagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApi
     */
    public mowersIdMessagesGet(requestParameters: MowerApiMowersIdMessagesGetRequest, options?: RawAxiosRequestConfig) {
        return MowerApiFp(this.configuration).mowersIdMessagesGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all stay out zones for a mower linked to the user associated with the access token. Stay out zones are not available on EPOS mowers.
     * @summary Get all stay out zones for a mower linked to a user.
     * @param {MowerApiMowersIdStayOutZonesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApi
     */
    public mowersIdStayOutZonesGet(requestParameters: MowerApiMowersIdStayOutZonesGetRequest, options?: RawAxiosRequestConfig) {
        return MowerApiFp(this.configuration).mowersIdStayOutZonesGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all detailed work areas for a mower linked to the user associated with the access token.
     * @summary Get all detailed work areas for a mower linked to a user.
     * @param {MowerApiMowersIdWorkAreasGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApi
     */
    public mowersIdWorkAreasGet(requestParameters: MowerApiMowersIdWorkAreasGetRequest, options?: RawAxiosRequestConfig) {
        return MowerApiFp(this.configuration).mowersIdWorkAreasGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed data for a work area for a mower linked to the user associated with the access token.
     * @summary Get detailed data for a work area for a mower linked to a user.
     * @param {MowerApiMowersIdWorkAreasWorkAreaIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MowerApi
     */
    public mowersIdWorkAreasWorkAreaIdGet(requestParameters: MowerApiMowersIdWorkAreasWorkAreaIdGetRequest, options?: RawAxiosRequestConfig) {
        return MowerApiFp(this.configuration).mowersIdWorkAreasWorkAreaIdGet(requestParameters.id, requestParameters.workAreaId, options).then((request) => request(this.axios, this.basePath));
    }
}

