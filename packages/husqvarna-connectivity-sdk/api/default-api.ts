/* tslint:disable */
/* eslint-disable */
/**
 * Husqvarna Connectivity API
 * This API allows you to obtain information about your Husqvarna connected products.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeviceResponse } from '../models';
// @ts-ignore
import type { DevicesResponse } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { FullDeviceResponse } from '../models';
// @ts-ignore
import type { SpecificationResponse } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns list of device ids the user has access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the full details of a specific device
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesIdFullGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesIdFullGet', 'id', id)
            const localVarPath = `/devices/{id}/full`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the details of a specific device
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesIdGet', 'id', id)
            const localVarPath = `/devices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the details of a specific specification
         * @param {string} specificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsSpecificationIdGet: async (specificationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'specificationId' is not null or undefined
            assertParamExists('specificationsSpecificationIdGet', 'specificationId', specificationId)
            const localVarPath = `/specifications/{specificationId}`
                .replace(`{${"specificationId"}}`, encodeURIComponent(String(specificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns list of device ids the user has access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DevicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.devicesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns the full details of a specific device
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesIdFullGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullDeviceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesIdFullGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.devicesIdFullGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns the details of a specific device
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.devicesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns the details of a specific specification
         * @param {string} specificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificationsSpecificationIdGet(specificationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificationsSpecificationIdGet(specificationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.specificationsSpecificationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns list of device ids the user has access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesGet(options?: RawAxiosRequestConfig): AxiosPromise<DevicesResponse> {
            return localVarFp.devicesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the full details of a specific device
         * @param {DefaultApiDevicesIdFullGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesIdFullGet(requestParameters: DefaultApiDevicesIdFullGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FullDeviceResponse> {
            return localVarFp.devicesIdFullGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the details of a specific device
         * @param {DefaultApiDevicesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesIdGet(requestParameters: DefaultApiDevicesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceResponse> {
            return localVarFp.devicesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the details of a specific specification
         * @param {DefaultApiSpecificationsSpecificationIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsSpecificationIdGet(requestParameters: DefaultApiSpecificationsSpecificationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SpecificationResponse> {
            return localVarFp.specificationsSpecificationIdGet(requestParameters.specificationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Returns list of device ids the user has access to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    devicesGet(options?: RawAxiosRequestConfig): AxiosPromise<DevicesResponse>;

    /**
     * 
     * @summary Returns the full details of a specific device
     * @param {DefaultApiDevicesIdFullGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    devicesIdFullGet(requestParameters: DefaultApiDevicesIdFullGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FullDeviceResponse>;

    /**
     * 
     * @summary Returns the details of a specific device
     * @param {DefaultApiDevicesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    devicesIdGet(requestParameters: DefaultApiDevicesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceResponse>;

    /**
     * 
     * @summary Returns the details of a specific specification
     * @param {DefaultApiSpecificationsSpecificationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    specificationsSpecificationIdGet(requestParameters: DefaultApiSpecificationsSpecificationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SpecificationResponse>;

}

/**
 * Request parameters for devicesIdFullGet operation in DefaultApi.
 * @export
 * @interface DefaultApiDevicesIdFullGetRequest
 */
export interface DefaultApiDevicesIdFullGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiDevicesIdFullGet
     */
    readonly id: string
}

/**
 * Request parameters for devicesIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiDevicesIdGetRequest
 */
export interface DefaultApiDevicesIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiDevicesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for specificationsSpecificationIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiSpecificationsSpecificationIdGetRequest
 */
export interface DefaultApiSpecificationsSpecificationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiSpecificationsSpecificationIdGet
     */
    readonly specificationId: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Returns list of device ids the user has access to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public devicesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).devicesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the full details of a specific device
     * @param {DefaultApiDevicesIdFullGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public devicesIdFullGet(requestParameters: DefaultApiDevicesIdFullGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).devicesIdFullGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the details of a specific device
     * @param {DefaultApiDevicesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public devicesIdGet(requestParameters: DefaultApiDevicesIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).devicesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the details of a specific specification
     * @param {DefaultApiSpecificationsSpecificationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public specificationsSpecificationIdGet(requestParameters: DefaultApiSpecificationsSpecificationIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).specificationsSpecificationIdGet(requestParameters.specificationId, options).then((request) => request(this.axios, this.basePath));
    }
}

